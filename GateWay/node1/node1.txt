#include <Adafruit_Sensor.h> //Library for Adafruit sensors , we are using for DHT
#include <DHT_U.h> //DHT library which uses some func from Adafruit Sensor library
#include <ESP8266WiFi.h> //library for using ESP8266 WiFi 
#include <PubSubClient.h> //library for MQTT
#include <ArduinoJson.h> //library for Parsing JSON

//defining Pins
#define DHTPIN D1
#define LED D5
#define PUMP D6
#define SUONG D7
#define Soi_SensorPin A0
//DHT parameters
#define DHTTYPE    DHT11     // DHT 11
DHT_Unified dht(DHTPIN, DHTTYPE);
uint32_t delayMS;
//!ID:<data>:<data>:<data>#
//MQTT Credentials
const char* ssid = "mot chiec Xoai";//setting your ap ssid
const char* password = "hieu301203";//setting your ap psk
const char* mqttServer = "192.168.137.1"; //MQTT URL
const char* mqttUserName = "hieu";  // MQTT username
const char* mqttPwd = "12345678";  // MQTT password
const char* clientID = "hieu0001"; // client id username+0001
const char* topic = "Tempdata_1"; //publish topic
const char* mess_from_area1 = "mess_from_area1"; //publish topic
//parameters for using non-blocking delay
unsigned long previousMillis = 0;
const long interval = 5000;
int time_soil = 20 ;
String msgStr = "";      // MQTT message buffer

  float temp, hum, soil;

bool mist_flag = 0 ;
int mist_counter = 0 ;

int pump_time = 0;
//setting up wifi and mqtt client
WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect(clientID, mqttUserName, mqttPwd)) {
      Serial.println("MQTT connected");
                                                                                                                                                                  
      client.subscribe("lights_1");
      Serial.println("Topic lights 1 Subscribed");
      client.subscribe("pump_1");
      Serial.println("Topic pump 1 Subscribed");
      client.subscribe("mist_1");
      Serial.println("Topic quat 1 Subscribed");
            client.subscribe("time_1");
      Serial.println("Topic phun time 1 Subscribed");
    }
    else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      delay(5000);  // wait 5sec and retry
    }
  }
}


//subscribe call back
void callback(char*topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
  Serial.print("Message:");
  String data = "";
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    data += (char)payload[i];
  }
  Serial.println();
  Serial.print("Message size :");
  Serial.println(length);
  Serial.println();
  Serial.println("-----------------------");
  Serial.println(data);
//---light---
if(data=="ON_L"){
  Serial.print("LIGHT: ");
 digitalWrite(LED, HIGH);
}
else if (data == "OFF_L"){
  Serial.print("LIGHT: ");
  digitalWrite(LED, LOW);
}
//--- pump----
else if(data=="ON_P"){
  Serial.print("PUMP: ");
 digitalWrite(PUMP, HIGH);
}else if (data=="OFF_P"){
    Serial.print("PUMP: ");
  digitalWrite(PUMP, LOW);
}
//---- phun suong ----
else if(data=="ON_S"){
  Serial.print("PHUN SUONG: ");
 digitalWrite(SUONG, HIGH);
}
else if (data=="OFF_S"){
  Serial.print("PHUN SUONG: ");
  digitalWrite(SUONG, LOW);
}
else{
   Serial.print("PUMP Time: ");
 digitalWrite(PUMP, HIGH);
  time_soil = data.toInt();
  for(int i = 0 ; i < time_soil; i++){
    time_soil--;
    delay(1000);
  } 
   digitalWrite(PUMP,LOW);
  
}
}


void setup() {
  Serial.begin(115200);
  // Initialize device.
  dht.begin();
  // get temperature sensor details.
  sensor_t sensor;
  dht.temperature().getSensor(&sensor);
  dht.humidity().getSensor(&sensor);
  pinMode(Soi_SensorPin, INPUT);
  pinMode(LED, OUTPUT);
  pinMode(PUMP, OUTPUT);
  pinMode(SUONG, OUTPUT);
  digitalWrite(LED, LOW);
  digitalWrite(PUMP, LOW);
  digitalWrite(SUONG, LOW);

  setup_wifi();

  client.setServer(mqttServer, 1883); //setting MQTT server
  client.setCallback(callback); //defining function which will be called when message is received.

}

void loop() {
  if (!client.connected()) { //if client is not connected
    reconnect(); //try to reconnect
  }
  client.loop();
  
  unsigned long currentMillis = millis(); //read current time

  if (currentMillis - previousMillis >= interval) { //if current time - last time > 5 sec
    previousMillis = currentMillis;

    //read temp and humidity
    sensors_event_t event;
    dht.temperature().getEvent(&event);


    if (isnan(event.temperature)) {
      Serial.println(F("Error reading temperature!"));
    }
    else {
      Serial.print(F("Temperature: "));
      temp = event.temperature;
      Serial.print(temp);
      Serial.println(F("Â°C"));
    }
    // Get humidity event and print its value.
    dht.humidity().getEvent(&event);
    if (isnan(event.relative_humidity)) {
      Serial.println(F("Error reading humidity!"));
    }
    else {
      Serial.print(F("Humidity: "));
      hum = event.relative_humidity;
      Serial.print(hum);
      Serial.println(F("%"));
    }
    
    soil = analogRead(Soi_SensorPin);
    int soil_percent = map(soil,0,1023,0,100);
    Serial.print("Soil :");
    Serial.print(soil_percent);
    Serial.println("%");
    //!ID:<data>:<data>:<data>#
    msgStr = "!1:"+String(temp) +":"+String(hum)+ ":" + String(soil_percent) +"#";
    byte arrSize = msgStr.length() + 1;
    char msg[arrSize];
    Serial.print("PUBLISH DATA:");
    Serial.println(msgStr);
    msgStr.toCharArray(msg, arrSize);
    client.publish(topic, msg);
    msgStr = "";
    delay(50);

  }

}